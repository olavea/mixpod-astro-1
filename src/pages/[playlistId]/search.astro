---
import Layout from "../../layouts/Layout.astro";
import { Client } from "podcast-api";
import { episodes } from "../../models/schema";
import { db } from "../../utils/db";

const { playlistId: playlistIdParam = "" } = Astro.params;
const playlistId = parseInt(playlistIdParam);

const query = Astro.url.searchParams.get("q");

// If apiKey is null, then we will connect to a mock server
// that returns fake data for testing purposes.
const podcastApi = Client({ apiKey: import.meta.env.LISTEN_NOTES_API_KEY });

let results = [];

if (query) {
  const response = await podcastApi.search({
    q: query,
    type: "episode",
    len_min: 10,
    len_max: 30,
    only_in: "title, description",
    page_size: 10,
  });

  results = response.data.results;
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const episodeId = formData.get("episodeId");

  if (episodeId && playlistId) {
    const { data: fetchedData } = await podcastApi.fetchEpisodeById({
      id: episodeId,
    });

    const episodeData = {
      title: fetchedData.title as string,
      description: fetchedData.description as string,
      audio: fetchedData.audio as string,
    };

    const upsertedEpisode = await db
      .insert(episodes)
      .values({ id: fetchedData.id as string, ...episodeData })
      .onConflictDoUpdate({ target: episodes.id, set: episodeData });

    console.log({ upsertedEpisode });

    // TODO: Upsert a rown in a join table that connects the episode to the playlist
  } else {
    // TODO Error handling
  }
}
---

<Layout title="Search">
  <main>
    <form>
      <fieldset>
        <legend>Search for a podcast episode</legend>
        <input type="search" name="q" value={query} />
        <button type="submit">Search</button>
      </fieldset>
    </form>

    <section>
      {
        results.map((result) => {
          return (
            <article>
              <h2 set:html={result.title_highlighted} />
              <p set:html={result.description_highlighted} />
              <audio controls src={result.audio} />
              <form method="POST">
                <input type="hidden" name="episodeId" value={result.id} />
                <button type="submit">Add to Playlist</button>
              </form>
            </article>
          );
        })
      }
    </section>
  </main>
</Layout>

<style>
  article {
    font-size: var(--step--1);
    position: relative;

    form {
      position: absolute;
      top: 0;
      right: 0;
    }
  }
  article :global(.ln-search-highlight) {
    background-color: yellow;
    display: inline-block;
  }

  audio {
    margin: var(--space-m) 0;
  }
</style>
